// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type AdminFile struct {
	ID               string     `json:"id"`
	Filename         string     `json:"filename"`
	OriginalFilename string     `json:"originalFilename"`
	Size             int        `json:"size"`
	MimeType         string     `json:"mimeType"`
	IsPublic         bool       `json:"isPublic"`
	Description      *string    `json:"description,omitempty"`
	Tags             []string   `json:"tags"`
	DownloadCount    int        `json:"downloadCount"`
	CreatedAt        time.Time  `json:"createdAt"`
	UpdatedAt        time.Time  `json:"updatedAt"`
	Owner            *User      `json:"owner"`
	TotalDownloads   int        `json:"totalDownloads"`
	LastDownloadAt   *time.Time `json:"lastDownloadAt,omitempty"`
}

type AdminFileConnection struct {
	Nodes       []*AdminFile `json:"nodes"`
	TotalCount  int          `json:"totalCount"`
	HasNextPage bool         `json:"hasNextPage"`
}

type AdminStats struct {
	TotalUsers       int `json:"totalUsers"`
	TotalFiles       int `json:"totalFiles"`
	TotalDownloads   int `json:"totalDownloads"`
	TotalStorageUsed int `json:"totalStorageUsed"`
	ActiveUsers      int `json:"activeUsers"`
	PublicFiles      int `json:"publicFiles"`
	RecentUploads    int `json:"recentUploads"`
	RecentDownloads  int `json:"recentDownloads"`
}

type AdminUser struct {
	ID             string     `json:"id"`
	Name           string     `json:"name"`
	Email          string     `json:"email"`
	Role           string     `json:"role"`
	QuotaUsed      int        `json:"quotaUsed"`
	QuotaLimit     int        `json:"quotaLimit"`
	IsActive       bool       `json:"isActive"`
	CreatedAt      time.Time  `json:"createdAt"`
	FileCount      int        `json:"fileCount"`
	TotalDownloads int        `json:"totalDownloads"`
	LastLoginAt    *time.Time `json:"lastLoginAt,omitempty"`
}

type AdminUserConnection struct {
	Nodes       []*AdminUser `json:"nodes"`
	TotalCount  int          `json:"totalCount"`
	HasNextPage bool         `json:"hasNextPage"`
}

type AuthResponse struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type DeleteResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type DownloadInfo struct {
	DownloadURL string    `json:"downloadUrl"`
	ExpiresAt   time.Time `json:"expiresAt"`
	Filename    string    `json:"filename"`
	Size        int       `json:"size"`
}

type File struct {
	ID               string    `json:"id"`
	Filename         string    `json:"filename"`
	OriginalFilename string    `json:"originalFilename"`
	Size             int       `json:"size"`
	MimeType         string    `json:"mimeType"`
	IsPublic         bool      `json:"isPublic"`
	Description      *string   `json:"description,omitempty"`
	Tags             []string  `json:"tags"`
	DownloadCount    int       `json:"downloadCount"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

type FileConnection struct {
	Nodes       []*File `json:"nodes"`
	TotalCount  int     `json:"totalCount"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Folder struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

type Mutation struct {
}

type Query struct {
}

type QuotaInfo struct {
	Used       int     `json:"used"`
	Limit      int     `json:"limit"`
	Percentage float64 `json:"percentage"`
	Files      int     `json:"files"`
}

type RegisterInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ShareLinkResponse struct {
	ShareToken string     `json:"shareToken"`
	ShareURL   string     `json:"shareUrl"`
	ExpiresAt  *time.Time `json:"expiresAt,omitempty"`
	IsActive   bool       `json:"isActive"`
}

type UpdateFileInput struct {
	Description *string  `json:"description,omitempty"`
	Tags        []string `json:"tags,omitempty"`
	IsPublic    *bool    `json:"isPublic,omitempty"`
}

type UploadRequestInput struct {
	Filename    string   `json:"filename"`
	MimeType    string   `json:"mimeType"`
	FolderID    *string  `json:"folderId,omitempty"`
	Description *string  `json:"description,omitempty"`
	Tags        []string `json:"tags,omitempty"`
	IsPublic    bool     `json:"isPublic"`
}

type UploadResponse struct {
	UploadID    string    `json:"uploadId"`
	UploadURL   string    `json:"uploadUrl"`
	ExpiresAt   time.Time `json:"expiresAt"`
	MaxFileSize int       `json:"maxFileSize"`
}

type User struct {
	ID         string    `json:"id"`
	Name       string    `json:"name"`
	Email      string    `json:"email"`
	Role       string    `json:"role"`
	QuotaUsed  int       `json:"quotaUsed"`
	QuotaLimit int       `json:"quotaLimit"`
	IsActive   bool      `json:"isActive"`
	CreatedAt  time.Time `json:"createdAt"`
}
